@page "/rooms/create"

@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing

@using MediatR
@using SzkolenieTechniczne2.Hotel.Domain.Command
@using SzkolenieTechniczne2.Hotel.Domain.Command.Room.Create
@inject IMediator Mediator
@inject NavigationManager NavigationManager

<h3>Dodaj nowy pokój</h3>

<EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="number" class="form-label">Numer pokoju</label>
        <InputText id="number" class="form-control" @bind-Value="Model.Number" />
    </div>

    <div class="mb-3">
        <label for="capacity" class="form-label">Pojemność</label>
        <InputNumber id="capacity" class="form-control" @bind-Value="Model.Capacity" />
    </div>

    <div class="form-check mb-3">
        <InputCheckbox id="isAvailable" class="form-check-input" @bind-Value="Model.IsAvailable" />
        <label class="form-check-label" for="isAvailable">Dostępny</label>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    <button type="submit" class="btn btn-primary">Zapisz</button>
    <a href="/rooms" class="btn btn-secondary">Anuluj</a>
</EditForm>

@code {
    private CreateRoomCommand Model { get; set; } = new();
    private string? errorMessage;

    private async Task HandleValidSubmit()
    {
        errorMessage = null;
        var result = await Mediator.Send(Model);

        if (result.IsSuccess)
        {
            NavigationManager.NavigateTo("/rooms");
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}